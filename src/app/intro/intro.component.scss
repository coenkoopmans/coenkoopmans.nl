@import '../variables.scss';

$font-size-h1-small: 30px;
$font-size-h1-big: 51px;
$font-size-tagLine: 18px;

$scroll-button-width: 42px;
$scroll-button-height: 15px;

$name-first-last-line-height: 55px;

$hexagon-width: 257px;
$hexagon-height: 293px;
$hexagon-margin: 12px;

$hexagon-width-tablet: $hexagon-width * 1.6;
$hexagon-height-tablet: $hexagon-height * 1.6;
$hexagon-margin-tablet: $hexagon-margin * 1.6;

.intro {
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
  padding: 39px 25px 0 25px;

  @include breakpoint('tablet') {
    padding: 60px 40px 0 40px;
  }
  @include breakpoint('desktop') {
    padding: 74px 0 0 0;
  }
}

.name {
  font-weight: 300;
  font-size: $font-size-h1-small;
  z-index: 2;
  @include breakpoint('tablet') {
    font-size: $font-size-h1-small * $scale-factor-tablet;
  }
}
.name--first, .name--last {
  display: block; // Force new line by setting block-level rendering
  font-weight: 700;
  font-size: $font-size-h1-big;
  line-height: $name-first-last-line-height;
  @include breakpoint('tablet') {
    font-size: $font-size-h1-big * $scale-factor-tablet;
    line-height: $name-first-last-line-height * $scale-factor-tablet;
  }
}
.name--lastEmphasis {
  color: $color-red;
}

.tagLine {
  font-family: $font-mono;
  font-size: $font-size-tagLine;
  font-weight: 400;
  line-height: 35px;
  margin-top: 40px;
  z-index: 2;
  @include breakpoint('tablet') {
    font-size: $font-size-tagLine * $scale-factor-tablet;
  }
  @include breakpoint('desktop') {
    width: 50%;
  }
}
.tagLine--emphasis {
  color: $color-blue;
}

.scrollDownButton {
  width: $scroll-button-width;
  height: $scroll-button-height;
  position: fixed;
  bottom: 10px;
  // Horizontally center
  left: 50%;
  transform: translateX(-50%);
  z-index: 1337;
  @include drop-shadow();

  @include breakpoint('tablet') {
    width: $scroll-button-width * $scale-factor-tablet;
    height: $scroll-button-height * $scale-factor-tablet;
  }
}
.scrollDownButton--image {
  width: inherit;
  height: inherit;
}

.introBackground {
  position: fixed;
  z-index: 1;
  bottom: 0;
  right: 0;
  width: $hexagon-width * 2 + $hexagon-margin;
  height: $hexagon-height * 1.8;
  overflow: hidden;

  @include breakpoint('tablet') {
    width: $hexagon-width-tablet * 2 + $hexagon-margin-tablet;
    height: $hexagon-height-tablet * 1.8;
  }
}

.introBackground__hexagon {
  width: $hexagon-width;
  height: $hexagon-height;
  position: absolute;

  @include breakpoint('tablet') {
    width: $hexagon-width-tablet;
    height: $hexagon-height-tablet;
  }
}

.introBackground__hexagon--fill {
  background: url('/assets/ui/hexagon-fill.svg');
  background-size: cover;
  bottom: 0;
  right: -$hexagon-width / 2;

  @include breakpoint('tablet') {
    right: -$hexagon-width-tablet / 2;
  }
}

.introBackground__hexagon--outline {
  background: url('/assets/ui/hexagon-outline.svg');
  background-size: cover;
  position: absolute;
  right: $hexagon-margin / 2;
  bottom: $hexagon-height * 0.79;

  @include breakpoint('tablet') {
    right: $hexagon-margin-tablet / 2;
    bottom: $hexagon-height-tablet * 0.79;
  }
}

/*

  Image hexagon below, beware - lots of maths and hacky stuff to follow, but it seemed like the best solution
  given the alternatives:
  - clip-path, which has little browser support
  - A full sized (retina included) png, which would be ~900k for just this image

 The logic for the solution below was pretty much ripped from:
 http://csshexagon.com/

*/

// tan(30deg) is magic scale factor for fitting a square into a rhombus that fits the top of a hexagon
// Math.tan(30 * Math.PI/180) evaluated in Javascript is pasted in as a value
$hexagon-image-scale-factor: 0.5773502691896257;

@function getHexagonCapWidth($width) {
  @return $width / sqrt(2);
}

@function getHexagonOffset($width) {
  @return $width / sqrt(2) / 2;
}

.introBackground__hexagon--image {
  height: $hexagon-height / 2;
  margin: ($hexagon-height / 4) 0;
  background: url('/assets/coen-koopmans-picture.jpg') center;
  background-size: auto $hexagon-height;

  bottom: 0;
  right: ($hexagon-width / 2) + $hexagon-margin;

  @include breakpoint('tablet') {
    height: $hexagon-height-tablet / 2;
    margin: ($hexagon-height-tablet / 4) 0;
    background-size: auto $hexagon-height-tablet;
    right: ($hexagon-width-tablet / 2) + $hexagon-margin-tablet;
  }
}

.introBackground__hexagon--image:after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: $hexagon-width;
  height: $hexagon-height / 2;
  z-index: 2;
  background: inherit;

  @include breakpoint('tablet') {
    width: $hexagon-width-tablet;
    height: $hexagon-height-tablet / 2;
  }
}

.introBackground__hexagon--imageTop,
.introBackground__hexagon--imageBottom {
  position: absolute;
  z-index: 1;
  width: getHexagonCapWidth($hexagon-width);
  height: getHexagonCapWidth($hexagon-width);
  overflow: hidden;
  transform: scaleY($hexagon-image-scale-factor) rotate(-45deg);
  background: inherit;
  left: ($hexagon-width - getHexagonCapWidth($hexagon-width)) / 2;

  @include breakpoint('tablet') {
    width: getHexagonCapWidth($hexagon-width-tablet);
    height: getHexagonCapWidth($hexagon-width-tablet);
    left: ($hexagon-width-tablet - getHexagonCapWidth($hexagon-width-tablet)) / 2;
  }
}

.introBackground__hexagon--imageTop:after,
.introBackground__hexagon--imageBottom:after {
  content: "";
  position: absolute;
  width: $hexagon-width;
  height: $hexagon-height / 2;
  transform: rotate(45deg) scaleY(1 / $hexagon-image-scale-factor) translateY(-$hexagon-height / 4);
  transform-origin: 0 0;
  background: inherit;

  @include breakpoint('tablet') {
    width: $hexagon-width-tablet;
    height: $hexagon-height-tablet / 2;
    transform: rotate(45deg) scaleY(1 / $hexagon-image-scale-factor) translateY(-$hexagon-height-tablet / 4);
  }
}

.introBackground__hexagon--imageTop {
  top: -1 * getHexagonOffset($hexagon-width);

  @include breakpoint('tablet') {
    top: -1 * getHexagonOffset($hexagon-width-tablet);
  }
}

.introBackground__hexagon--imageTop:after {
  background-position: center top;
}

.introBackground__hexagon--imageBottom {
  bottom: -1 * getHexagonOffset($hexagon-width);

  @include breakpoint('tablet') {
    bottom: -1 * getHexagonOffset($hexagon-width-tablet);
  }
}

.introBackground__hexagon--imageBottom:after {
  background-position: center bottom;
}
